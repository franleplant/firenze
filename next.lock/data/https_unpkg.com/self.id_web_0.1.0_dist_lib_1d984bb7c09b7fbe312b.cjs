"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var connect=require("@3id/connect"),core=require("@self.id/core"),dids=require("dids");typeof require!="undefined"&&require;var __accessCheck$1=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)},__privateGet$1=(e,t,r)=>(__accessCheck$1(e,t,"read from private field"),r?r.call(e):t.get(e)),__privateAdd$1=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},__privateSet$1=(e,t,r,i)=>(__accessCheck$1(e,t,"write to private field"),i?i.call(e,r):t.set(e,r),r),_threeId;class WebClient extends core.Core{constructor(t){super(t);__privateAdd$1(this,_threeId,void 0),__privateSet$1(this,_threeId,new connect.ThreeIdConnect(t.connectNetwork??t.ceramic))}get threeId(){return __privateGet$1(this,_threeId)}async authenticate(t,r=!1){const i=await this.connect(t);return await i.authenticate(),r&&(this.ceramic.did=i),i}async connect(t){return await __privateGet$1(this,_threeId).connect(t),new dids.DID({provider:__privateGet$1(this,_threeId).getDidProvider(),resolver:this.resolver})}}_threeId=new WeakMap,typeof require!="undefined"&&require;var __accessCheck=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)},__privateGet=(e,t,r)=>(__accessCheck(e,t,"read from private field"),r?r.call(e):t.get(e)),__privateAdd=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},__privateSet=(e,t,r,i)=>(__accessCheck(e,t,"write to private field"),i?i.call(e,r):t.set(e,r),r),_client,_did;const _SelfID=class{constructor(e){if(__privateAdd(this,_client,void 0),__privateAdd(this,_did,void 0),!e.did.authenticated)throw new Error("Input DID must be authenticated, use SelfID.authenticate() instead of new SelfID()");__privateSet(this,_client,e.client),__privateSet(this,_did,e.did)}static async authenticate(e){const{authProvider:t,...r}=e,i=new WebClient(r),a=await i.authenticate(t,!0);return new _SelfID({client:i,did:a})}get client(){return __privateGet(this,_client)}get id(){return __privateGet(this,_did).id}async get(e){return await __privateGet(this,_client).dataStore.get(e,__privateGet(this,_did).id)}async set(e,t){return await __privateGet(this,_client).dataStore.set(e,t)}};let SelfID=_SelfID;_client=new WeakMap,_did=new WeakMap,Object.defineProperty(exports,"EthereumAuthProvider",{enumerable:!0,get:function(){return connect.EthereumAuthProvider}}),exports.SelfID=SelfID,exports.WebClient=WebClient;
//# sourceMappingURL=lib.cjs.map
